# this file defines all the common variables needed in the whole experiment
from psychopy import prefs
prefs.hardware['audioLib'] = ['pygame']

from psychopy import sound
#---------------variables/lists-----------------------------------
class Variables:
    def __init__(self):
        self.stg = 'tbd'
        self.secPos = 'tbd'
        self.secPos2 = 'TBD'
        self.expInfo = {'Net ID':''}
        self.expInfo_genpop = {'ID':''}
        self.expRun = {'Run':''}
        self.gray2 = "#808080"
        self.purple = "#800080"
        self.white = "#FFFFFF"
        self.black = "#000000"
#        self.cyan = "#00FFFF"
#        self.yellow = "#FFFF00"
        self.rew_sound_file = 'coin_echo5.wav'
        self.fixation = 'fix.png'
        self.elX = [0,0,0,-120,120,-240,-120,120,240] # [1]-reward, [2,3] - init, rest - symmetric for decisions !!!SWITCHED 2 and 3!!!
        self.elY = [-210, 30,-90,-90, -90,-210,-210,-210,-210,]
        self.clockX = 0
        self.clockY = 240
        self.mag = [1,2,5,8,10]
        self.shortmag = 4
        self.delay = [ 4, 7, 14, 30, 64]
        self.shortdelay = 0
        self.delaydiscounter = 1
        self.stage0 = False
        self.state = 'TBD'
        self.dataFile = 'TBD'
        self.rewPosCode = 0 #reward position code, which refers to (0,-120) in matrixXY list
        self.rewPos= 0
        self.initPosCode = 'TBD'
        self.initPos = 'TBD'
        self.bluePosCode = 'TBD'
        self.bluePos = 'TBD'
        self.yellowPosCode = 'TBD'
        self.yellowPos = 'TBD'
        self.choice = 'none'
        self.choice_rand = 'none' #option picked by system on non-response trial
        self.ychoice = '/' #1 if choose yellow, 0 if blue
        self.refresherColor = 'TBD'
        self.pay = None
        self.sameInitPos = False
        self.forcedTrial = False
        self.circle_fullSize = 100
        self.radius = 50
        self.circle_innerSize = 90
        self.TotalTrial = 50 # (this num * percentage of smaller trials /number of smaller trials) >= 2; in current case has to >= 80
        self.verbalTotalTrial_dw = 100
        self.trial = 1000 # changed from 40, cannot proceed if fail
        self.forcedTrialNum= 16 # changed from 16
        self.highLowTrialNum = 6
        self.order_forcedTrialNum = len(self.mag)*2 # var.mag and var.delay have the same length
        self.refresherNum = 20 # changed from 20
        self.blockTrial = 10 # changed from 10
        self.oneRound = 60 # changed from 60
        self.rewdelPair = 60 # force number of pairs
        self.sb = 10
        self.rewIndex = 0
        self.delayIndex = 0
        self.rewWrong = False
        self.initWrong = False
        self.fixWrong = False
        self.blueWrong = False
        self.yellowWrong = False
        self.choiceWrong = False
        self.trialCounter = 0
        self.trialsCorrect = 0
        self.forcedTrialCounter = 0
        self.refresherCounter = 0
        self.blockTrialCounter = 0
        self.totalTrialCounter = 0
        self.mergedTrialCounter = 0
        self.goodPokesInARoll=0
        self.learnedRewPoke = 0
        self.learnedInitPoke = 0
        self.learnedFix = 0
        self.learnedBluePoke = 0
        self.learnedYellowPoke = 0
        self.learnedChoicePoke = 0
        self.pairNum = 0
        self.blockName = 1
        self.rewDelPairList = []
        self.initStimDis = 'TBD'
        self.magScale = 50
        self.rewardGot = 0
        self.fixDur = 2
        self.passThreshold = 4 # changed from 4
        self.SF=41000
        self.hitmag=1
        self.point_S = 0 #acumulated points in short task
        self.point_L = 0 #acumulated points in long task
        self.rewmag = 1
        self.blockRewMag='/'
        self.delaymag = 0
        self.snddelaymag = 0
        self.pay_delay = None
        self.pay_num = None
        self.rew_sound = sound.Sound(value=self.rew_sound_file)
        self.vioSoundDur = 0.8
        self.hitSoundDur = self.rew_sound.getDuration()
        self.ISRSoundDur = 0.5
        self.DBRSoundDur = 0.48 #changed from 0.5
        self.delaySoundDur = 1
        self.showCoinDur = 0.2
        self.blockBreak = 20
        self.blockBreakCancel = '/'
        self.timeStart1 = '/'
        self.timeStart2 = '/'
        self.timeStart3 = '/'
        self.timeStart4 = '/'
        self.delayStart = '/'
        self.standardRT_get_reward = 5
        self.sessid = 0
        self.longfMRI = False
        self.shortfMRI = False
        # new
        self.decision_RT = '/'
        self.Rpos = 'tbd'
        self.Lpos = 'tbd'
        # new vars for session data saving.
        self.rate_ans = []
        self.dt_ans = []
        self.chhist_ans = []
        self.quest = 'tbd'
        self.session1 = 0
        self.d = 'tbd'
        self.response = 'tbd'
        self.presscheck = None
        self.press = 'tbd'
        self.rewMAG = 0 # rewmag chosen by subject (or system)
        self.time_compensation = 'tbd'
        self.starttime = 'tbd' #experiment start time
        self.compensation_time1 = 'tbd'
        self.compensation_time2 = 'tbd'
        self.onset_decision = 'tbd'
        self.offset_decision = 'tbd'
        self.trials='tbd'
        self.onset_jittered_fixation = 'tbd' # onset of first ITI
        self.offset_jittered_fixation = 'tbd'# offset of first ITI
        self.Chinese = False
        self.choice_rand = 'tbd'
        self.maglist = 'tbd'
        self.new_delayTime = 'tbd' # remianing delay time after compensation
        self.onset_clock = 'tbd'
        self.offset_clock = 'tbd'
        self.onset_coins = 'tbd'
        self.offset_coins = 'tbd'
        self.jittered_fixation = 'tbd' #duration of planned jittered fixation (2 + ~4)
        self.second_ITI = 'tbd' #duration of second ITI + 0.5 second
        self.time_coins = 'tbd' #duration of showing coins in short task
        self.trial_start = 'tbd' # timepoint of trial's start
        self.trial_end ='tbd' # timepoint of trial's end
        self.bundleList_com = [] #to store all reward bundles in computer session
        self.bundleList_fMRI = [] #to store all reward bundles in fMRI session
        self.onset_confirmation = 'tbd'
        self.offset_confirmation = 'tbd'
        self.globalclock = 'tbd'
        self.behavior = False
        self.Lpos_1 = 0
        self.Lpos_2 = 0
        self.coin_length = 0 # to decide the duration of coin epoch, minimum is 2 sec.
        self.coin_dur_P = 0 # Planned coion duration, either 2 sec or (0.2 + sound duration) sec
        self.trial_end = 0
        self.setGroup = 0 # choice set order setting
        self.pll = 0 # calculating PLL to decide zoomed-in choise set
        self.zoom = 0 # 1--high, 2--mid, 3--low.
        self.setorder = [['A','B','C','D'],['C','D','A','B']]
        self.group = 'tbd'
        self.setlabel_L = 0
        self.setlabel_S = 0
        self.sessID = 0
        self.zoom_s = None
        self.zoom_l = None
        self.L = False
        self.S = False
        self.nopress = 0
